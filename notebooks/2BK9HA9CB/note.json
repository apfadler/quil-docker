{
  "paragraphs": [
    {
      "text": "%md \n\u003ch2\u003eScala Quantlib Examples\u003c/h2\u003e\n\nA lot of the code shown here is due to Klaus Spanderen. See https://github.com/lballabio/QuantLib-SWIG/blob/master/Scala/examples/",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132699189_1829764829",
      "id": "20160513-094459_531267046",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eScala Quantlib Examples\u003c/h2\u003e\n\u003cp\u003eA lot of the code shown here is due to Klaus Spanderen. See https://github.com/lballabio/QuantLib-SWIG/blob/master/Scala/examples/\u003c/p\u003e\n"
      },
      "dateCreated": "May 13, 2016 9:44:59 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport org.quantlib.Month._\nimport org.quantlib.{Array \u003d\u003e QArray, _}\n\ncase class Datum(date: Date, rate: Double)",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132728328_339293563",
      "id": "20160513-094528_1822099549",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.quantlib.Month._\nimport org.quantlib.{Array\u003d\u003eQArray, _}\ndefined class Datum\n"
      },
      "dateCreated": "May 13, 2016 9:45:28 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:36 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eHeston Monte Carlo\u003c/h3\u003e",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132979256_1015649836",
      "id": "20160513-094939_484971857",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eHeston Monte Carlo\u003c/h3\u003e\n"
      },
      "dateCreated": "May 13, 2016 9:49:39 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nval dayCounter     \u003d new ActualActual();\nval settlementDate \u003d new Date(27, Month.December, 2004)\nSettings.instance setEvaluationDate settlementDate\n\nval exerciseDate \u003d new Date(28, Month.March, 2005)\nval maturity \u003d dayCounter.yearFraction(settlementDate, exerciseDate)\n\nval payoff \u003d new PlainVanillaPayoff(Option.Type.Call, 1.05)\nval exercise \u003d new EuropeanExercise(exerciseDate)\nval vanillaOption \u003d new VanillaOption(payoff, exercise)\n\nval rTS \u003d new YieldTermStructureHandle(\n    new FlatForward(settlementDate, 0.0225, dayCounter))\n\nval divTS \u003d new YieldTermStructureHandle(\n    new FlatForward(settlementDate, 0.02, dayCounter))\n\nval s0 \u003d new QuoteHandle(new SimpleQuote(1.0))\n\nval v0    \u003d  0.1\nval kappa \u003d  3.16\nval theta \u003d  0.09\nval sigma \u003d  0.4\nval rho   \u003d -0.2\n\nval hestonProcess \u003d new HestonProcess(rTS, divTS, s0, v0, \n                                      kappa, theta, sigma, rho)\n\nval hestonModel \u003d new HestonModel(hestonProcess)\nval analyticEngine \u003d new AnalyticHestonEngine(hestonModel)\nvanillaOption.setPricingEngine(analyticEngine)\n\nval timeSteps \u003d 10\nval grsg \u003d new GaussianRandomSequenceGenerator(\n    new UniformRandomSequenceGenerator(\n        2*timeSteps, new UniformRandomGenerator(1234)))\n\nval grid \u003d new TimeGrid(maturity, timeSteps)\nval times \u003d new DoubleVector()\n(0L until grid.getSize).foreach(i \u003d\u003e times add(grid elementAt i))\nval gen \u003d new GaussianMultiPathGenerator(hestonProcess, times, grsg) \n\nval stat \u003d new IncrementalStatistics()\nfor (i \u003c- (0 until 50000)) {\n    stat.add(0.5*( payoff.getValue(gen.next.value at 0 back)\n                  +payoff.getValue(gen.antithetic.value at 0 back())))\n}\n\nprintf(\"Semi-Analytic: %f\\n\", vanillaOption.NPV())\nprintf(\"Monte-Carlo  : %f +/-%f\\n\", stat.mean(), stat.errorEstimate()) \n",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132974794_101086377",
      "id": "20160513-094934_689604573",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dayCounter: org.quantlib.ActualActual \u003d Actual/Actual (ISDA) day counter\nsettlementDate: org.quantlib.Date \u003d December 27th, 2004\nexerciseDate: org.quantlib.Date \u003d March 28th, 2005\nmaturity: Double \u003d 0.24927764054195672\npayoff: org.quantlib.PlainVanillaPayoff \u003d org.quantlib.PlainVanillaPayoff@28df1128\nexercise: org.quantlib.EuropeanExercise \u003d org.quantlib.EuropeanExercise@624c66cf\nvanillaOption: org.quantlib.VanillaOption \u003d org.quantlib.VanillaOption@2a8b3bf8\nrTS: org.quantlib.YieldTermStructureHandle \u003d org.quantlib.YieldTermStructureHandle@5271747a\ndivTS: org.quantlib.YieldTermStructureHandle \u003d org.quantlib.YieldTermStructureHandle@745335e4\ns0: org.quantlib.QuoteHandle \u003d org.quantlib.QuoteHandle@4c16cebf\nv0: Double \u003d 0.1\nkappa: Double \u003d 3.16\ntheta: Double \u003d 0.09\nsigma: Double \u003d 0.4\nrho: Double \u003d -0.2\nhestonProcess: org.quantlib.HestonProcess \u003d org.quantlib.HestonProcess@69218362\nhestonModel: org.quantlib.HestonModel \u003d org.quantlib.HestonModel@4e264d7e\nanalyticEngine: org.quantlib.AnalyticHestonEngine \u003d org.quantlib.AnalyticHestonEngine@2fc006a8\ntimeSteps: Int \u003d 10\ngrsg: org.quantlib.GaussianRandomSequenceGenerator \u003d org.quantlib.GaussianRandomSequenceGenerator@26a183ac\ngrid: org.quantlib.TimeGrid \u003d org.quantlib.TimeGrid@6f865dae\ntimes: org.quantlib.DoubleVector \u003d org.quantlib.DoubleVector@7d29bf6d\ngen: org.quantlib.GaussianMultiPathGenerator \u003d org.quantlib.GaussianMultiPathGenerator@3590717\nstat: org.quantlib.IncrementalStatistics \u003d org.quantlib.IncrementalStatistics@7e236dda\nwarning: there were 1 feature warning(s); re-run with -feature for details\nSemi-Analytic: 0.040477\nMonte-Carlo  : 0.040868 +/-0.000220\n"
      },
      "dateCreated": "May 13, 2016 9:49:34 AM",
      "dateStarted": "May 13, 2016 10:19:34 AM",
      "dateFinished": "May 13, 2016 10:19:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eHeston Calibration\u003c/h3\u003e",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463133250284_-96676202",
      "id": "20160513-095410_1732477988",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eHeston Calibration\u003c/h3\u003e\n"
      },
      "dateCreated": "May 13, 2016 9:54:10 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nval calendar       \u003d new TARGET();\nval dayCounter     \u003d new Actual365Fixed();\nval settlementDate \u003d new Date(5, Month.July, 2002);\nSettings.instance setEvaluationDate settlementDate\n\nval rates \u003d new DoubleVector()\nList(0.0357,0.0357,0.0349,0.0341,0.0355,\n     0.0359,0.0368,0.0386,0.0401).foreach(i \u003d\u003e rates.add(i))\n     \nval dates \u003d new DateVector()\nval maturityInDays \u003d Vector(0, 13, 41, 75, 165, 256, 345, 524, 703)     \nmaturityInDays.foreach(i \u003d\u003e dates.add(settlementDate.add(i)))\n\nval rTS \u003d new YieldTermStructureHandle(\n    new ZeroCurve(dates, rates, dayCounter))\n\nval divTS \u003d new YieldTermStructureHandle(\n    new FlatForward(settlementDate, 0.0, dayCounter))\n\nval s0 \u003d new QuoteHandle(new SimpleQuote(4468.17))\n\nval vols \u003d Vector(\n    0.6625,0.4875,0.4204,0.3667,0.3431,0.3267,0.3121,0.3121,\n    0.6007,0.4543,0.3967,0.3511,0.3279,0.3154,0.2984,0.2921,\n    0.5084,0.4221,0.3718,0.3327,0.3155,0.3027,0.2919,0.2889,\n    0.4541,0.3869,0.3492,0.3149,0.2963,0.2926,0.2819,0.2800,\n    0.4060,0.3607,0.3330,0.2999,0.2887,0.2811,0.2751,0.2775,\n    0.3726,0.3396,0.3108,0.2781,0.2788,0.2722,0.2661,0.2686,\n    0.3550,0.3277,0.3012,0.2781,0.2781,0.2661,0.2661,0.2681,\n    0.3428,0.3209,0.2958,0.2740,0.2688,0.2627,0.2580,0.2620,\n    0.3302,0.3062,0.2799,0.2631,0.2573,0.2533,0.2504,0.2544,\n    0.3343,0.2959,0.2705,0.2540,0.2504,0.2464,0.2448,0.2462,\n    0.3460,0.2845,0.2624,0.2463,0.2425,0.2385,0.2373,0.2422,\n    0.3857,0.2860,0.2578,0.2399,0.2357,0.2327,0.2312,0.2351,\n    0.3976,0.2860,0.2607,0.2356,0.2297,0.2268,0.2241,0.2320 )\n    \nval strikes \u003d Vector( \n    3400,3600,3800,4000,4200,4400,4500,4600,4800,5000,5200,5400,5600)\n    \nval calibrationHelpers \u003d new CalibrationHelperVector()    \n    \nfor (s \u003c- (0 to 12)) {\n    for (m \u003c- (1 to 8)) {\n        val vol \u003d new QuoteHandle(new SimpleQuote(vols(s*8+m-1)))\n        val maturityInWeeks \u003d ((maturityInDays(m)+3)/7.).toInt\n        val maturity \u003d new Period(maturityInWeeks, TimeUnit.Weeks)\n\n        calibrationHelpers.add(\n            new HestonModelHelper(maturity, calendar, s0.value, \n                                  strikes(s), vol, rTS, divTS, \n                                  CalibrationHelper.ImpliedVolError))\n    }\n}\n\nval helpers \u003d for (i \u003c- 0 until calibrationHelpers.size().toInt)\n    yield(calibrationHelpers.get(i))\n\nval v0   \u003d  0.1\nval kappa\u003d  1.0\nval theta\u003d  0.1\nval sigma\u003d  0.5\nval rho  \u003d -0.5\n\nval hestonProcess \u003d new HestonProcess(rTS, divTS, s0, v0, \n                                      kappa, theta, sigma, rho)\n\nval hestonModel \u003d new HestonModel(hestonProcess) \nval analyticHestonEngine \u003d new AnalyticHestonEngine(hestonModel, 64);\n\nhelpers.foreach(h \u003d\u003e h setPricingEngine analyticHestonEngine)\n\nval optimizerMethod \u003d new LevenbergMarquardt(1e-8, 1e-8, 1e-8)\nhestonModel.calibrate(calibrationHelpers, optimizerMethod, \n                      new EndCriteria(400, 40, 1.0e-8, 1.0e-8, 1.0e-8))\n                      \nval sse \u003d helpers map {h \u003d\u003e 100*h.calibrationError} map {e \u003d\u003e e*e} sum;\nprintf(\"error\u003d  %f\\n\",sse)\n\nval params \u003d hestonModel.params\nprintf(\"v0   \u003d  %f\\n\",params.get(4))\nprintf(\"kappa\u003d  %f\\n\",params.get(1))\nprintf(\"theta\u003d  %f\\n\",params.get(0))\nprintf(\"sigma\u003d  %f\\n\",params.get(2))\nprintf(\"rho  \u003d %f\\n\", params.get(3))",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463133245998_312296554",
      "id": "20160513-095405_1421487647",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "calendar: org.quantlib.TARGET \u003d TARGET calendar\ndayCounter: org.quantlib.Actual365Fixed \u003d Actual/365 (Fixed) day counter\nsettlementDate: org.quantlib.Date \u003d July 5th, 2002\nrates: org.quantlib.DoubleVector \u003d org.quantlib.DoubleVector@393fe089\ndates: org.quantlib.DateVector \u003d org.quantlib.DateVector@d6b83a9\nmaturityInDays: scala.collection.immutable.Vector[Int] \u003d Vector(0, 13, 41, 75, 165, 256, 345, 524, 703)\nrTS: org.quantlib.YieldTermStructureHandle \u003d org.quantlib.YieldTermStructureHandle@19c66909\ndivTS: org.quantlib.YieldTermStructureHandle \u003d org.quantlib.YieldTermStructureHandle@67950f8f\ns0: org.quantlib.QuoteHandle \u003d org.quantlib.QuoteHandle@e689d81\nvols: scala.collection.immutable.Vector[Double] \u003d Vector(0.6625, 0.4875, 0.4204, 0.3667, 0.3431, 0.3267, 0.3121, 0.3121, 0.6007, 0.4543, 0.3967, 0.3511, 0.3279, 0.3154, 0.2984, 0.2921, 0.5084, 0.4221, 0.3718, 0.3327, 0.3155, 0.3027, 0.2919, 0.2889, 0.4541, 0.3869, 0.3492, 0.3149, 0.2963, 0.2926, 0.2819, 0.28, 0.406, 0.3607, 0.333, 0.2999, 0.2887, 0.2811, 0.2751, 0.2775, 0.3726, 0.3396, 0.3108, 0.2781, 0.2788, 0.2722, 0.2661, 0.2686, 0.355, 0.3277, 0.3012, 0.2781, 0.2781, 0.2661, 0.2661, 0.2681, 0.3428, 0.3209, 0.2958, 0.274, 0.2688, 0.2627, 0.258, 0.262, 0.3302, 0.3062, 0.2799, 0.2631, 0.2573, 0.2533, 0.2504, 0.2544, 0.3343, 0.2959, 0.2705, 0.254, 0.2504, 0.2464, 0.2448, 0.2462, 0.346, 0.2845, 0.2624, 0.2463, 0.2425, 0.2385, 0.2373, 0.2422, 0.3857, 0.286, 0.2578, 0.2399, 0.2357, 0.2327,...strikes: scala.collection.immutable.Vector[Int] \u003d Vector(3400, 3600, 3800, 4000, 4200, 4400, 4500, 4600, 4800, 5000, 5200, 5400, 5600)\ncalibrationHelpers: org.quantlib.CalibrationHelperVector \u003d org.quantlib.CalibrationHelperVector@6008072d\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\nhelpers: scala.collection.immutable.IndexedSeq[org.quantlib.CalibrationHelper] \u003d Vector(org.quantlib.CalibrationHelper@8ac3f5d, org.quantlib.CalibrationHelper@6473f71d, org.quantlib.CalibrationHelper@7964c470, org.quantlib.CalibrationHelper@469cd353, org.quantlib.CalibrationHelper@61f6125c, org.quantlib.CalibrationHelper@622f8842, org.quantlib.CalibrationHelper@1e9ad76a, org.quantlib.CalibrationHelper@47b47fd8, org.quantlib.CalibrationHelper@1b3562af, org.quantlib.CalibrationHelper@4de1dd1d, org.quantlib.CalibrationHelper@277bc2dd, org.quantlib.CalibrationHelper@2e364f6b, org.quantlib.CalibrationHelper@6f981180, org.quantlib.CalibrationHelper@68a523bc, org.quantlib.CalibrationHelper@31cd4150, org.quantlib.CalibrationHelper@1a7b04bb, org.quantlib.CalibrationHelper@2739e92, org.quantlib.C...v0: Double \u003d 0.1\nkappa: Double \u003d 1.0\ntheta: Double \u003d 0.1\nsigma: Double \u003d 0.5\nrho: Double \u003d -0.5\nhestonProcess: org.quantlib.HestonProcess \u003d org.quantlib.HestonProcess@2a6ca8dc\nhestonModel: org.quantlib.HestonModel \u003d org.quantlib.HestonModel@54314736\nanalyticHestonEngine: org.quantlib.AnalyticHestonEngine \u003d org.quantlib.AnalyticHestonEngine@9f0bd05\noptimizerMethod: org.quantlib.LevenbergMarquardt \u003d org.quantlib.LevenbergMarquardt@2b34feb9\nwarning: there were 1 feature warning(s); re-run with -feature for details\nsse: Double \u003d 177.2346899128428\nerror\u003d  177.234690\nparams: org.quantlib.Array \u003d [ 0.0745911; 15.6628; 3.3619; -0.511493; 0.195662 ]\nv0   \u003d  0.195662\nkappa\u003d  15.662779\ntheta\u003d  0.074591\nsigma\u003d  3.361902\nrho  \u003d -0.511493\n"
      },
      "dateCreated": "May 13, 2016 9:54:05 AM",
      "dateStarted": "May 13, 2016 10:19:36 AM",
      "dateFinished": "May 13, 2016 10:19:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eCPI Bond\u003c/h3\u003e",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132914032_1647499475",
      "id": "20160513-094834_1202930841",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eCPI Bond\u003c/h3\u003e\n"
      },
      "dateCreated": "May 13, 2016 9:48:34 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nval startTime \u003d System.currentTimeMillis\n\nval calendar \u003d new UnitedKingdom()\nval dayCounter \u003d new ActualActual();\nval convention \u003d BusinessDayConvention.ModifiedFollowing\n\nval today \u003d new Date(25, November, 2009)\nval evaluationDate \u003d calendar.adjust(today)\nSettings.instance().setEvaluationDate(evaluationDate)        \n\nval yTS \u003d new YieldTermStructureHandle(\n            new FlatForward(evaluationDate, 0.05, dayCounter))\n\nval from \u003d new Date(20, July, 2007);\nval to   \u003d new Date(20, November, 2009);\nval tenor \u003d new Period(1, TimeUnit.Months)\nval rpiSchedule \u003d new Schedule(from, to, tenor, calendar, \n                               convention, convention,\n                               DateGeneration.Rule.Backward, false)\n\nval cpiTS \u003d new RelinkableZeroInflationTermStructureHandle\nval inflationIndex \u003d new UKRPI(false, cpiTS)\nval fixData \u003d Array(206.1, 207.3, 208.0, 208.9, 209.7, 210.9,\n                    209.8, 211.4, 212.1, 214.0, 215.1, 216.8,\n                    216.5, 217.2, 218.4, 217.7, 216,\n                    212.9, 210.1, 211.4, 211.3, 211.5,\n                    212.8, 213.4, 213.4, 213.4, 214.4)\n\nfor (i \u003c- 0 until fixData.size) {\n  inflationIndex.addFixing(rpiSchedule.date(i), fixData(i)) \n}\n\nval observationLag \u003d new Period(2, TimeUnit.Months)\nval zciisData \u003d Array(\n  Datum(new Date(25, November, 2010), 3.0495 ),\n  Datum(new Date(25, November, 2011), 2.93 ),\n  Datum(new Date(26, November, 2012), 2.9795 ),\n  Datum(new Date(25, November, 2013), 3.029 ),\n  Datum(new Date(25, November, 2014), 3.1425 ),\n  Datum(new Date(25, November, 2015), 3.211 ),\n  Datum(new Date(25, November, 2016), 3.2675 ),\n  Datum(new Date(25, November, 2017), 3.3625 ),\n  Datum(new Date(25, November, 2018), 3.405 ),\n  Datum(new Date(25, November, 2019), 3.48 ),\n  Datum(new Date(25, November, 2021), 3.576 ),\n  Datum(new Date(25, November, 2024), 3.649 ),\n  Datum(new Date(26, November, 2029), 3.751 ),\n  Datum(new Date(27, November, 2034), 3.77225),\n  Datum(new Date(25, November, 2039), 3.77 ),\n  Datum(new Date(25, November, 2049), 3.734 ),\n  Datum(new Date(25, November, 2059), 3.714 )\n)\n\nval zeroSwapHelpers \u003d new ZeroHelperVector\nzciisData map { datum \u003d\u003e zeroSwapHelpers add \n  new ZeroCouponInflationSwapHelper(\n    datum.rate/100d, observationLag,\n    datum.date, calendar, convention, dayCounter, inflationIndex) }\n\ncpiTS linkTo new PiecewiseZeroInflation(          \n  evaluationDate, calendar, dayCounter, observationLag, \n  inflationIndex.frequency, inflationIndex.interpolated, \n  zciisData(0).rate/100d,\n  yTS, zeroSwapHelpers, 1.0e-12, new Linear)\n  \nval notional \u003d 1000000d;\n\nval fixedRates \u003d new DoubleVector()\nfixedRates add 0.1    \n\nval fixedDayCounter \u003d new Actual365Fixed\nval fixedPaymentConvention \u003d BusinessDayConvention.ModifiedFollowing\nval fixedPaymentCalendar \u003d new UnitedKingdom\nval contractObservationLag \u003d new Period(3, TimeUnit.Months)\nval observationInterpolation \u003d CPI.InterpolationType.Flat\nval settlementDays \u003d 3\nval growthOnly \u003d true\n\nval baseCPI \u003d 206.1\nval startDate \u003d new Date(2, October, 2007)\nval endDate \u003d new Date(2, October, 2052)\n\nval fixedSchedule \u003d new Schedule(startDate, endDate, \n  new Period(6, TimeUnit.Months), fixedPaymentCalendar,\n  BusinessDayConvention.Unadjusted,\n  BusinessDayConvention.Unadjusted,\n  DateGeneration.Rule.Backward, false)\n  \nval bond \u003d new CPIBond(settlementDays, notional, growthOnly,\n                       baseCPI, contractObservationLag,\n                       inflationIndex, observationInterpolation,\n                       fixedSchedule, fixedRates, fixedDayCounter, \n                       fixedPaymentConvention, new Date)\n                       \nbond setPricingEngine new DiscountingBondEngine(yTS)\nprintln(\"clean price: \" + bond.cleanPrice + \" \\t exec time: \" + \n  (System.currentTimeMillis - startTime)/1000d)\n  \ncpiTS linkTo new ZeroInflationTermStructure  // break cylic reference between\n                                             // cpiTS, zeroSwapHelpers and inflationIndex",
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132776783_-2035114493",
      "id": "20160513-094616_836977821",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "startTime: Long \u003d 1463134788580\ncalendar: org.quantlib.UnitedKingdom \u003d UK settlement calendar\ndayCounter: org.quantlib.ActualActual \u003d Actual/Actual (ISDA) day counter\nconvention: org.quantlib.BusinessDayConvention \u003d ModifiedFollowing\ntoday: org.quantlib.Date \u003d November 25th, 2009\nevaluationDate: org.quantlib.Date \u003d November 25th, 2009\nyTS: org.quantlib.YieldTermStructureHandle \u003d org.quantlib.YieldTermStructureHandle@74d9bcd3\nfrom: org.quantlib.Date \u003d July 20th, 2007\nto: org.quantlib.Date \u003d November 20th, 2009\ntenor: org.quantlib.Period \u003d 1M\nrpiSchedule: org.quantlib.Schedule \u003d org.quantlib.Schedule@18b076d\ncpiTS: org.quantlib.RelinkableZeroInflationTermStructureHandle \u003d org.quantlib.RelinkableZeroInflationTermStructureHandle@139f89f2\ninflationIndex: org.quantlib.UKRPI \u003d UK RPI index\nfixData: Array[Double] \u003d Array(206.1, 207.3, 208.0, 208.9, 209.7, 210.9, 209.8, 211.4, 212.1, 214.0, 215.1, 216.8, 216.5, 217.2, 218.4, 217.7, 216.0, 212.9, 210.1, 211.4, 211.3, 211.5, 212.8, 213.4, 213.4, 213.4, 214.4)\nobservationLag: org.quantlib.Period \u003d 2M\nzciisData: Array[Datum] \u003d Array(Datum(November 25th, 2010,3.0495), Datum(November 25th, 2011,2.93), Datum(November 26th, 2012,2.9795), Datum(November 25th, 2013,3.029), Datum(November 25th, 2014,3.1425), Datum(November 25th, 2015,3.211), Datum(November 25th, 2016,3.2675), Datum(November 25th, 2017,3.3625), Datum(November 25th, 2018,3.405), Datum(November 25th, 2019,3.48), Datum(November 25th, 2021,3.576), Datum(November 25th, 2024,3.649), Datum(November 26th, 2029,3.751), Datum(November 27th, 2034,3.77225), Datum(November 25th, 2039,3.77), Datum(November 25th, 2049,3.734), Datum(November 25th, 2059,3.714))\nzeroSwapHelpers: org.quantlib.ZeroHelperVector \u003d org.quantlib.ZeroHelperVector@6ec4cfe\nres129: Array[Unit] \u003d Array((), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ())\nnotional: Double \u003d 1000000.0\nfixedRates: org.quantlib.DoubleVector \u003d org.quantlib.DoubleVector@637ded48\nfixedDayCounter: org.quantlib.Actual365Fixed \u003d Actual/365 (Fixed) day counter\nfixedPaymentConvention: org.quantlib.BusinessDayConvention \u003d ModifiedFollowing\nfixedPaymentCalendar: org.quantlib.UnitedKingdom \u003d UK settlement calendar\ncontractObservationLag: org.quantlib.Period \u003d 3M\nobservationInterpolation: org.quantlib.CPI.InterpolationType \u003d Flat\nsettlementDays: Int \u003d 3\ngrowthOnly: Boolean \u003d true\nbaseCPI: Double \u003d 206.1\nstartDate: org.quantlib.Date \u003d October 2nd, 2007\nendDate: org.quantlib.Date \u003d October 2nd, 2052\nfixedSchedule: org.quantlib.Schedule \u003d org.quantlib.Schedule@277c8e1b\nbond: org.quantlib.CPIBond \u003d org.quantlib.CPIBond@44fb1536\nclean price: 383.0181640621462 \t exec time: 3.123\n"
      },
      "dateCreated": "May 13, 2016 9:46:16 AM",
      "dateStarted": "May 13, 2016 10:19:44 AM",
      "dateFinished": "May 13, 2016 10:19:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "May 13, 2016 10:19:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463132826856_-1035644120",
      "id": "20160513-094706_1468713571",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "May 13, 2016 9:47:06 AM",
      "dateStarted": "May 13, 2016 10:19:33 AM",
      "dateFinished": "May 13, 2016 10:19:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Quantlib Examples",
  "id": "2BK9HA9CB",
  "angularObjects": {
    "2BMST158R": [],
    "2BNJE44FY": [],
    "2BNKPCHN2": [],
    "2BM68G2YM": [],
    "2BJWHB4QB": [],
    "2BHZC3YPG": [],
    "2BJSM69HU": [],
    "2BN27XM17": [],
    "2BJW2G123": [],
    "2BHU7BGDU": [],
    "2BM3B5ZJW": [],
    "2BMQ4Y2QW": [],
    "2BMDUX563": []
  },
  "config": {},
  "info": {}
}