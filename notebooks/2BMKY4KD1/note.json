{
  "paragraphs": [
    {
      "text": "%md\n\u003ch2\u003eCombining Zeppelin, Ignite, QuantLib, and QUIL\u003c/h2\u003e\n",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452437285037_-1410984338",
      "id": "20160110-144805_947597523",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eCombining Zeppelin, Ignite, QuantLib, and QUIL\u003c/h2\u003e\n"
      },
      "dateCreated": "Jan 10, 2016 2:48:05 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eImport libraries, configure ignite, and connect to the cluster\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463081886438_1007547307",
      "id": "20160512-193806_318733434",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eImport libraries, configure ignite, and connect to the cluster\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:38:06 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\n// Import ignite libs\n\nimport org.apache.ignite.cluster.ClusterNode\nimport org.apache.ignite.scalar.scalar\nimport org.apache.ignite.scalar.scalar._\nimport scala.collection.JavaConversions._\nimport org.apache.ignite.events.EventType.EVTS_TASK_EXECUTION\n\n\n//enable task event generation (so that the rest of the cluster knows about the tasks executed here)\nEVTS_TASK_EXECUTION.foreach {\n    e \u003d\u003e ignite$.events().enableLocal(e)\n}\n",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452439582300_2082413605",
      "id": "20160110-152622_47244505",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.ignite.cluster.ClusterNode\nimport org.apache.ignite.scalar.scalar\nimport org.apache.ignite.scalar.scalar._\nimport scala.collection.JavaConversions._\nimport org.apache.ignite.events.EventType.EVTS_TASK_EXECUTION\n"
      },
      "dateCreated": "Jan 10, 2016 3:26:22 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\n// Some basic cluster info\n\nprintln(\"Number of client nodes: \" + ignite$.cluster().nodes().filter( n \u003d\u003e n.isClient() ).size()  )\nprintln(\"Number of server nodes: \" + ignite$.cluster().nodes().filter( n \u003d\u003e !n.isClient() ).size() )\nprintln(\"Number of cpus: \" + ignite$.cluster().metrics().getTotalCpus() )",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452439604016_938201025",
      "id": "20160110-152644_1537706105",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Number of client nodes: 1\nNumber of server nodes: 1\nNumber of cpus: 2\n"
      },
      "dateCreated": "Jan 10, 2016 3:26:44 PM",
      "dateStarted": "Jun 17, 2016 12:37:44 PM",
      "dateFinished": "Jun 17, 2016 12:37:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eRunning a simple Quantlib calculation on the cluster\u003c/h3\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463081794996_-714558121",
      "id": "20160512-193634_1859203454",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eRunning a simple Quantlib calculation on the cluster\u003c/h3\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:36:34 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\n\nignite$.compute().call(() \u003d\u003e {\n    \n    import org.quantlib._\n    \n    val dayCounter     \u003d new ActualActual();\n\tval settlementDate \u003d new Date(27, Month.December, 2004);\n\tSettings.instance().setEvaluationDate(settlementDate);\n\n\tval exerciseDate \u003d new Date(28, Month.March, 2005);\n\tval maturity \u003d dayCounter.yearFraction(settlementDate, exerciseDate);\n\n\tval payoff \u003d new PlainVanillaPayoff(Option.Type.Call, 1.05);\n\tval exercise \u003d new EuropeanExercise(exerciseDate);\n\tval vanillaOption \u003d new VanillaOption(payoff, exercise);\n\n\tval rTS \u003d new YieldTermStructureHandle(\n\tnew FlatForward(settlementDate, 0.0225, dayCounter));\n\n\tval divTS \u003d new YieldTermStructureHandle(\n\tnew FlatForward(settlementDate, 0.02, dayCounter));\n\n\tval s0 \u003d new QuoteHandle(new SimpleQuote(1.0));\n\n\tval v0    \u003d  0.2;\n\tval kappa \u003d  3.16;\n\tval theta \u003d  0.09;\n\tval sigma \u003d  0.4;\n\tval rho   \u003d -0.1;\n\n\tval hestonProcess \u003d new HestonProcess(rTS, divTS, s0, v0, \n\tkappa, theta, sigma, rho);\n\n\tval hestonModel \u003d new HestonModel(hestonProcess);\n\tval analyticEngine \u003d new AnalyticHestonEngine(hestonModel);\n\tvanillaOption.setPricingEngine(analyticEngine);\n\n    vanillaOption.NPV()\n})",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452438985774_1764933942",
      "id": "20160110-151625_417374606",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res17: Double \u003d 0.059627860214295725\n"
      },
      "dateCreated": "Jan 10, 2016 3:16:25 PM",
      "dateStarted": "Jun 17, 2016 12:37:51 PM",
      "dateFinished": "Jun 17, 2016 12:37:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eAdding trade and market data\u003c/h3\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082044715_-1270552575",
      "id": "20160512-194044_26065314",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eAdding trade and market data\u003c/h3\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:40:44 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eCreating a simpley key/value cache for market data and a generic JSON document cache to hold trade data\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082755306_76315931",
      "id": "20160512-195235_1192865600",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eCreating a simpley key/value cache for market data and a generic JSON document cache to hold trade data\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:52:35 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport org.quil.server.DocumentCache\nimport org.quil.server.SimpleCache\nimport org.quil.JSON._\n\nvar MarketData \u003d SimpleCache.getOrCreate(\"Market\")\n\nMarketData.put(\"EUR_Swap_1Y\", \"0.01\")\nMarketData.put(\"EUR_Swap_2Y\", \"0.03\")\nMarketData.put(\"EUR_Swap_3Y\", \"0.04\")\nMarketData.put(\"EUR_Swap_5Y\", \"0.05\")\nMarketData.put(\"EUR_Swap_10Y\", \"0.04\")\n\nvar TradeData \u003d DocumentCache.getOrCreate(\"Trade\")\n\nTradeData.put(\"Trade_1\", Document(Map( \"ID\" -\u003e \"Trade_1\", \"Notional\" -\u003e \"100.0\", \"Counterparty\" -\u003e \"A-Bank\")))",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082091087_-520014740",
      "id": "20160512-194131_653670300",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.quil.server.DocumentCache\nimport org.quil.server.SimpleCache\nimport org.quil.JSON._\nMarketData: org.quil.server.SimpleCache \u003d org.quil.server.SimpleCache@26be9881\nTradeData: org.quil.server.DocumentCache \u003d org.quil.server.DocumentCache@74c9f67f\n"
      },
      "dateCreated": "May 12, 2016 7:41:31 PM",
      "dateStarted": "Jun 17, 2016 12:37:52 PM",
      "dateFinished": "Jun 17, 2016 12:37:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eRun SQL queries on the caches\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082825577_1092681318",
      "id": "20160512-195345_1559360642",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eRun SQL queries on the caches\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:53:45 PM",
      "dateStarted": "Jun 17, 2016 12:37:42 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\nselect * from \"Market\".String",
      "dateUpdated": "Jun 17, 2016 12:38:02 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_KEY",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_VAL",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_KEY",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_VAL",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082464225_562408678",
      "id": "20160512-194744_573072589",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_KEY\t_VAL\nEUR_Swap_10Y\t0.04\nEUR_Swap_1Y\t0.01\nEUR_Swap_2Y\t0.03\nEUR_Swap_3Y\t0.04\nEUR_Swap_5Y\t0.05\n"
      },
      "dateCreated": "May 12, 2016 7:47:44 PM",
      "dateStarted": "Jun 17, 2016 12:38:05 PM",
      "dateFinished": "Jun 17, 2016 12:38:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\nselect * from \"Trade\".ComplexElement where _val like \u0027%A%\u0027",
      "dateUpdated": "Jun 17, 2016 12:38:08 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_KEY",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_VAL",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_KEY",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_VAL",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082539064_2015913401",
      "id": "20160512-194859_677167993",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_KEY\t_VAL\nTrade_1\t{\"ID\" : \"Trade_1\", \"Notional\" : \"100.0\", \"Counterparty\" : \"A-Bank\"}\n"
      },
      "dateCreated": "May 12, 2016 7:48:59 PM",
      "dateStarted": "Jun 17, 2016 12:38:08 PM",
      "dateFinished": "Jun 17, 2016 12:38:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eQuery JSON cache using a lambda as predicate\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082935455_1715574463",
      "id": "20160512-195535_336127067",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eQuery JSON cache using a lambda as predicate\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:55:35 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nTradeData.filter( (K:String,V:Document) \u003d\u003e V.Counterparty.asString\u003d\u003d \"A-Bank\")",
      "dateUpdated": "Jun 17, 2016 12:38:14 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082614682_-1976767142",
      "id": "20160512-195014_1804386175",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res78: java.util.List[org.quil.JSON.Document] \u003d [{\"ID\" : \"Trade_1\", \"Notional\" : \"100.0\", \"Counterparty\" : \"A-Bank\"}]\n"
      },
      "dateCreated": "May 12, 2016 7:50:14 PM",
      "dateStarted": "Jun 17, 2016 12:38:14 PM",
      "dateFinished": "Jun 17, 2016 12:38:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eLoad a pricing template from XML file and add it to another cache",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463083408036_121230861",
      "id": "20160512-200328_1490170648",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eLoad a pricing template from XML file and add it to another cache\u003c/p\u003e\n"
      },
      "dateCreated": "May 12, 2016 8:03:28 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport scala.io.Source._\n\nvar template \u003d scala.io.Source.fromURL(\"https://raw.githubusercontent.com/apfadler/quil-src/master/dist/sampledata/QLXMLTemplates/Template.Trade.Swap.xml\").mkString\n\nvar Templates \u003d SimpleCache.getOrCreate(\"Template\")\n\nTemplates.put(\"Trade.Swap\", template)",
      "dateUpdated": "Jun 17, 2016 12:38:17 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463083478782_-1281255501",
      "id": "20160512-200438_85898019",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import scala.io.Source._\ntemplate: String \u003d\n\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e\n\u003c!-- Example Template for Vanilla Swap Pricing --\u003e\n\n\u003cbeans xmlns\u003d\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation\u003d\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\"\u003e\n\n\n   \u003cbean id\u003d\"CalTarget\" class\u003d\"org.quantlib.TARGET\" lazy-init\u003d\"true\"\u003e\n   \u003c/bean\u003e\n\n   \u003cbean id\u003d\"todaysDate\" class\u003d\"org.quantlib.Date\" lazy-init\u003d\"true\"\u003e\n\t\t\u003cconstructor-arg index\u003d\"0\" type\u003d\"int\" value\u003d\"23\"/\u003e\n\t\t\u003cconstructor-arg index\u003d\"1\" type\u003d\"Month\" value\u003d\"May\"/\u003e\n\t\t\u003cconstructor-arg index\u003d\"2\" type \u003d\"int\" value\u003d\"2006\"/\u003e\n   \u003c/bean\u003e\n\n   \u003cbean id\u003d\"settlementDate\" class\u003d\"org.quantlib.Date\" lazy-init\u003d\"true\"\u003e\n\t\t\u003cconstructor-arg index\u003d\"0\"...Templates: org.quil.server.SimpleCache \u003d org.quil.server.SimpleCache@4ebef2f6\n"
      },
      "dateCreated": "May 12, 2016 8:04:38 PM",
      "dateStarted": "Jun 17, 2016 12:38:17 PM",
      "dateFinished": "Jun 17, 2016 12:38:18 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003ePricing a trade by submitting a pricing task to the grid using QUIL API\u003c/h3\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463081934884_-1661963155",
      "id": "20160512-193854_1618047676",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003ePricing a trade by submitting a pricing task to the grid using QUIL API\u003c/h3\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:38:54 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport org.quil.server._\nimport org.quil.server.Tasks._\n\nvar taskDescription  \u003d \"\"\"\n\n{\n\t\"Interpreter\" : \"org.quil.interpreter.QuantLibTemplates.QuantLibXmlTemplateInterpreter\",\n\t\"Task\"\t: \"PriceTrade\",\n\t\"Template\" : \"Trade.Swap\",\n\t\"Repository\" : \"Template\",\n\t\"MarketData\" : { \n\t\t\"Base\" :\"Market\",\n\t\t\"Additional\" : {\n\t\t    \"EUR_Swap_1Y\" : \"0.03\"\n\t\t}\n\t}\n\t\"TradeData\" : {\n\t\t\"ID\" : \"1\",\n\t\t\"Notional\" : \"10000.0\",\n\t\t\"Cpty\" : \"A\"\n\t},\n\t\n\t\"Tag\": \"Trade_1\"\n}\n\n\"\"\";\n\nvar T \u003d Task.fromString(taskDescription);\nTaskRunner.runTask(T);\n",
      "dateUpdated": "Jun 17, 2016 12:38:45 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460120190989_143769506",
      "id": "20160408-125630_1302680931",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.quil.server._\nimport org.quil.server.Tasks._\ntaskDescription: String \u003d\n\"\n\n{\n\t\"Interpreter\" : \"org.quil.interpreter.QuantLibTemplates.QuantLibXmlTemplateInterpreter\",\n\t\"Task\"\t: \"PriceTrade\",\n\t\"Template\" : \"Trade.Swap\",\n\t\"Repository\" : \"Template\",\n\t\"MarketData\" : {\n\t\t\"Base\" :\"Market\",\n\t\t\"Additional\" : {\n\t\t    \"EUR_Swap_1Y\" : \"0.03\"\n\t\t}\n\t}\n\t\"TradeData\" : {\n\t\t\"ID\" : \"1\",\n\t\t\"Notional\" : \"10000.0\",\n\t\t\"Cpty\" : \"A\"\n\t},\n\n\t\"Tag\": \"Trade_1\"\n}\n\n\"\nT: org.quil.server.Tasks.Task \u003d org.quil.server.Tasks.PriceTrade@373d0fd9\n"
      },
      "dateCreated": "Apr 8, 2016 12:56:30 PM",
      "dateStarted": "Jun 17, 2016 12:38:45 PM",
      "dateFinished": "Jun 17, 2016 12:38:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003eQuerying the results cache using Ignite SQL\u003c/h3\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463082000366_-1466233234",
      "id": "20160512-194000_1493667170",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eQuerying the results cache using Ignite SQL\u003c/h3\u003e\n"
      },
      "dateCreated": "May 12, 2016 7:40:00 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\n\nselect  _taskName,_taskstatus, _tasktag,_taskresult from PriceTrade",
      "dateUpdated": "Jun 17, 2016 12:38:49 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_TASKNAME",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_TASKSTATUS",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "_TASKSTATUS",
              "index": 1.0,
              "aggr": "sum"
            },
            "xAxis": {
              "name": "_TASKNAME",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460120378138_-278856641",
      "id": "20160408-125938_150862359",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_TASKNAME\t_TASKSTATUS\t_TASKTAG\t_TASKRESULT\n95d3bd1b-2a52-4a40-9e1d-88fee8e1a096\t3\tTrade_1\t\nbeab6083-a4f7-47cc-b65c-4e188dff151f\t2\tTrade_1\t{\"PV\":\"48.793757047116756\"}\nc5455ab7-c9b4-45cc-9baa-cfc632ae34ad\t2\tScenario_EUR_Swap_1Y_1\t{\"PV\":\"-0.018937672939602024\"}\nd1d4780b-7a6a-44a2-9463-b5d547ca2030\t2\tScenario_EUR_Swap_1Y_2\t{\"PV\":\"4.900188045098391\"}\nefd9e575-4c86-4bf0-9045-9b54c1152677\t2\tTrade_1\t{\"PV\":\"48.793757047116756\"}\n"
      },
      "dateCreated": "Apr 8, 2016 12:59:38 PM",
      "dateStarted": "Jun 17, 2016 12:38:49 PM",
      "dateFinished": "Jun 17, 2016 12:38:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\nselect _tasktag, _field,_doublevalue from \"Results\".ResultItem",
      "dateUpdated": "Jun 17, 2016 12:38:32 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [
            {
              "name": "_FIELD",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "_FIELD",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463852869621_995572666",
      "id": "20160521-174749_643957094",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_TASKTAG\t_FIELD\t_DOUBLEVALUE\nScenario_EUR_Swap_1Y_2\tPV\t5.92334871848928\nScenario_EUR_Swap_1Y_1\tPV\t5.181798798242761\nScenario_EUR_Swap_1Y_2\tPV\t5.74070427783883\nScenario_EUR_Swap_1Y_2\tPV\t5.369962216187476\nScenario_EUR_Swap_1Y_2\tPV\t4.409720226345203\nTrade_1\tPV\t48.793757047116756\nScenario_EUR_Swap_1Y_1\tPV\t-0.018937672939602024\nScenario_EUR_Swap_1Y_2\tPV\t4.900188045098391\nScenario_EUR_Swap_1Y_2\tPV\t4.799716141976893\nScenario_EUR_Swap_1Y_2\tPV\t4.991728477925241\n"
      },
      "dateCreated": "May 21, 2016 5:47:49 PM",
      "dateStarted": "Jun 17, 2016 12:38:32 PM",
      "dateFinished": "Jun 17, 2016 12:38:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003e Starting several scenarios in parallel (async)\u003c/h3\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463142635338_1212305941",
      "id": "20160513-123035_1501178006",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e Starting several scenarios in parallel (async)\u003c/h3\u003e\n"
      },
      "dateCreated": "May 13, 2016 12:30:35 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eDefining some case classes for eye candy\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942232645_478679234",
      "id": "20160522-183712_2026882409",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eDefining some case classes for eye candy\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:37:12 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\n\nimport org.quil.server._\nimport org.quil.server.Tasks._\nimport spray.json._, DefaultJsonProtocol._\n\n\ncase class MarketDataTemplate(\n    var Base: String,\n    var Additional: Map[String,String]\n)\n\ncase class TaskTemplate(\n    var Interpreter : String,\n    var Tag : String,\n    var Task : String,\n    var Template : String,\n    var Repository : String,\n    var MarketData : MarketDataTemplate,\n    var TradeData : scala.Option[Map[String,String]],\n    var Trades : scala.Option[String],\n    var Where : scala.Option[String]\n)\n\ncase class Scenario (\n    var ID : String,\n    var Delta : Map[String,String]\n)\n\n\nobject  JsonProtocol extends DefaultJsonProtocol {\n    implicit val ScenarioFormat \u003d jsonFormat2(Scenario)\n    implicit val MarketFormat \u003d jsonFormat(MarketDataTemplate, \"Base\", \"Additional\")\n    implicit val TaskFormat \u003d jsonFormat(TaskTemplate, \"Interpreter\", \"Tag\", \"Task\", \"Template\", \"Repository\", \"MarketData\", \"TradeData\", \"Trades\", \"Where\")\n}\n\n\n\n",
      "dateUpdated": "Jun 17, 2016 12:38:57 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460386377901_1984595708",
      "id": "20160411-145257_899306704",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.quil.server._\nimport org.quil.server.Tasks._\nimport spray.json._\nimport DefaultJsonProtocol._\ndefined class MarketDataTemplate\ndefined class TaskTemplate\ndefined class Scenario\ndefined object JsonProtocol\n"
      },
      "dateCreated": "Apr 11, 2016 2:52:57 PM",
      "dateStarted": "Jun 17, 2016 12:38:57 PM",
      "dateFinished": "Jun 17, 2016 12:38:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eDefine the template task for each scenario and the market data changes for each scenario. Then submit each as a task into the grid\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942277156_565140468",
      "id": "20160522-183757_2057454712",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eDefine the template task for each scenario and the market data changes for each scenario. Then submit each as a task into the grid\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:37:57 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport JsonProtocol._\n\nvar taskTpl  \u003d  TaskTemplate(\n\n        Interpreter \u003d  \"org.quil.interpreter.QuantLibTemplates.QuantLibXmlTemplateInterpreter\",\n        Tag \u003d \"Scenario_\",\n        Task \u003d  \"PriceTrade\",\n    \tTemplate \u003d \"Trade.Swap\",\n    \tRepository \u003d  \"Template\",\n    \tMarketData \u003d  MarketDataTemplate (  \n    \t\tBase  \u003d \"Market\",\n    \t\tAdditional \u003d Map()\n    \t),\n    \tTradeData \u003d Some(Map(\"ID\" -\u003e \"1\",\n            \t\t    \"Notional\" -\u003e \"2000.0\",\n            \t\t    \"Cpty\" -\u003e \"A\")),\n        Trades \u003d None,\n        Where \u003d None\n        \n);\n\n\nval Scenarios \u003d List (\n    Scenario ( ID \u003d \"EUR_Swap_1Y_1\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.01\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.02\"))\n)\n\nScenarios foreach { scenario \u003d\u003e {\n    \n        var scenarioTask \u003d taskTpl.copy()\n        \n        scenarioTask.Tag +\u003d scenario.ID\n        \n        scenarioTask.MarketData.Additional ++\u003d scenario.Delta\n        \n        var T \u003d Task.fromString(scenarioTask.toJson.toString);\n        TaskRunner.runTask(T);\n    }\n}",
      "dateUpdated": "Jun 17, 2016 12:39:01 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463874249830_541189820",
      "id": "20160521-234409_1489580712",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import JsonProtocol._\ntaskTpl: TaskTemplate \u003d TaskTemplate(org.quil.interpreter.QuantLibTemplates.QuantLibXmlTemplateInterpreter,Scenario_,PriceTrade,Trade.Swap,Template,MarketDataTemplate(Market,Map()),Some(Map(ID -\u003e 1, Notional -\u003e 2000.0, Cpty -\u003e A)),None,None)\nScenarios: List[Scenario] \u003d List(Scenario(EUR_Swap_1Y_1,Map(EUR_Swap_1Y -\u003e 0.01)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.02)))\n"
      },
      "dateCreated": "May 21, 2016 11:44:09 PM",
      "dateStarted": "Jun 17, 2016 12:39:01 PM",
      "dateFinished": "Jun 17, 2016 12:39:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eSelect the results from the caches\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942340236_-89424681",
      "id": "20160522-183900_1166484972",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eSelect the results from the caches\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:39:00 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\nselect _taskstatus,_taskname,_taskresult from PriceTrade",
      "dateUpdated": "Jun 17, 2016 12:39:10 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_TASKSTATUS",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_TASKNAME",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_TASKSTATUS",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_TASKNAME",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463143463202_1563180493",
      "id": "20160513-124423_1780728614",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_TASKSTATUS\t_TASKNAME\t_TASKRESULT\n2\t12fef0c2-7f0b-443e-8d44-96205fe8304d\t{\"PV\":\"4.900188045098391\"}\n3\t95d3bd1b-2a52-4a40-9e1d-88fee8e1a096\t\n2\tbeab6083-a4f7-47cc-b65c-4e188dff151f\t{\"PV\":\"48.793757047116756\"}\n2\tc5455ab7-c9b4-45cc-9baa-cfc632ae34ad\t{\"PV\":\"-0.018937672939602024\"}\n2\td1d4780b-7a6a-44a2-9463-b5d547ca2030\t{\"PV\":\"4.900188045098391\"}\n2\td206a80a-799a-434e-aab9-28e2f75ab15d\t{\"PV\":\"-0.018937672939602024\"}\n2\tefd9e575-4c86-4bf0-9045-9b54c1152677\t{\"PV\":\"48.793757047116756\"}\n"
      },
      "dateCreated": "May 13, 2016 12:44:23 PM",
      "dateStarted": "Jun 17, 2016 12:39:10 PM",
      "dateFinished": "Jun 17, 2016 12:39:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite.ignitesql\n\nselect _tasktag, _field, _doublevalue  from \"Results\".ResultItem",
      "dateUpdated": "Jun 17, 2016 12:39:13 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463822834705_-1832984937",
      "id": "20160521-092714_798476548",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_TASKTAG\t_FIELD\t_DOUBLEVALUE\nScenario_EUR_Swap_1Y_2\tPV\t4.900188045098391\nScenario_EUR_Swap_1Y_2\tPV\t5.92334871848928\nScenario_EUR_Swap_1Y_1\tPV\t5.181798798242761\nScenario_EUR_Swap_1Y_2\tPV\t5.74070427783883\nScenario_EUR_Swap_1Y_2\tPV\t5.369962216187476\nScenario_EUR_Swap_1Y_2\tPV\t4.409720226345203\nTrade_1\tPV\t48.793757047116756\nScenario_EUR_Swap_1Y_1\tPV\t-0.018937672939602024\nScenario_EUR_Swap_1Y_2\tPV\t4.900188045098391\nScenario_EUR_Swap_1Y_1\tPV\t-0.018937672939602024\nTrade_1\tPV\t48.793757047116756\nScenario_EUR_Swap_1Y_2\tPV\t4.799716141976893\nScenario_EUR_Swap_1Y_2\tPV\t4.991728477925241\n"
      },
      "dateCreated": "May 21, 2016 9:27:14 AM",
      "dateStarted": "Jun 17, 2016 12:39:13 PM",
      "dateFinished": "Jun 17, 2016 12:39:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003ch3\u003e Starting several scenarios in parallel (sync)\u003c/h3\u003e\nInstead of submitting Tasks asynchronsouly we submit a number of closures (one for each scenario) and wait until they are all computed. The result is directly returned to us. We do not have to look into the results cache.",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942078599_782660990",
      "id": "20160522-183438_1948609505",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003e Starting several scenarios in parallel (sync)\u003c/h3\u003e\n\u003cp\u003eInstead of submitting Tasks asynchronsouly we submit a number of closures (one for each scenario) and wait until they are all computed. The result is directly returned to us. We do not have to look into the results cache.\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:34:38 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cb\u003eImplicit type conversions (lists of scala closures to java collection of ignite compatible closure)\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942437560_166722853",
      "id": "20160522-184037_1662480743",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eImplicit type conversions (lists of scala closures to java collection of ignite compatible closure)\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:40:37 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport org.apache.ignite.compute._; \nimport org.apache.ignite.lang._;  \n\ndef toIgniteCallable[R]( func:(() \u003d\u003e R)   ) : IgniteCallable[R] \u003d { \n    \n    return new IgniteCallable[R] {\n        \n        var daFunc \u003d func\n        \n        var uuid \u003d java.util.UUID.randomUUID.toString()\n        \n        override def call : R \u003d {\n            println(\"Closure UUID \u003d \" + uuid);\n            daFunc()\n        }\n    \n    }\n}\n\nimplicit def toJobList[T](origList:List[() \u003d\u003e T]):java.util.Collection[IgniteCallable[T]] \u003d  {\n\t\t\t\t\t\t \n\t var newList \u003d new java.util.ArrayList[IgniteCallable[T]]()\n\t \n\t for (e \u003c- origList) { newList.add(toIgniteCallable(e)) } \n\t  \n\t newList \n}; \n\n\n",
      "dateUpdated": "Jun 17, 2016 12:39:19 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463823441709_-1044593402",
      "id": "20160521-093721_210991830",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.ignite.compute._\nimport org.apache.ignite.lang._\ntoIgniteCallable: [R](func: () \u003d\u003e R)org.apache.ignite.lang.IgniteCallable[R]\nwarning: there was one feature warning; re-run with -feature for details\ntoJobList: [T](origList: List[() \u003d\u003e T])java.util.Collection[org.apache.ignite.lang.IgniteCallable[T]]\n"
      },
      "dateCreated": "May 21, 2016 9:37:21 AM",
      "dateStarted": "Jun 17, 2016 12:39:19 PM",
      "dateFinished": "Jun 17, 2016 12:39:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cb\u003eMap each scenario to a closure and execute them all at one\u003c/b\u003e",
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463942507592_-1085711438",
      "id": "20160522-184147_1513387839",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cb\u003eMap each scenario to a closure and execute them all at one\u003c/b\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "May 22, 2016 6:41:47 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%ignite\n\nimport JsonProtocol._\n\n\n//Scenario definitions\nval Scenarios \u003d List (\n    Scenario ( ID \u003d \"EUR_Swap_1Y_1\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.25\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.24\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.29\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.28\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.21\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.26\")),\n    Scenario ( ID \u003d \"EUR_Swap_1Y_2\", Delta \u003d Map(\"EUR_Swap_1Y\"-\u003e \"0.23\"))\n)\n\n//Create a list of functions to be executed on the cluster\nval closures \u003d \n    \n    Scenarios map { scenario \u003d\u003e \n    {\n        () \u003d\u003e { \n                    \n            var scenarioTask \u003d \n            \n                TaskTemplate(\n                    Interpreter \u003d  \"org.quil.interpreter.QuantLibTemplates.QuantLibXmlTemplateInterpreter\",\n                    Tag \u003d \"Scenario_\" + scenario.ID,\n                    Task \u003d  \"PricePortfolio\",\n                \tTemplate \u003d \"Trade.Swap\",\n                \tRepository \u003d  \"Template\",\n                \tMarketData \u003d  MarketDataTemplate (  \n                \t\tBase  \u003d \"Market\",\n                \t\tAdditional \u003d scenario.Delta\n                \t),\n                \tTradeData \u003d None,\n                \t\n                    Trades \u003d Some(\"Trade\") ,\n\t                Where \u003d  Some(\" true\")\n            );\n            \n            println(scenarioTask.toJson.toString);\n\n            var T \u003d Task.fromString(scenarioTask.toJson.toString);\n            T.run();\n            \n            scenarioTask.Tag + \" : \" + Task.get(T.getName()).getResult()\n                    \n            }\n            \n        }\n    }\n\n// run the functions and wait\nvar results \u003d  ignite$.compute(ignite$.cluster().forRemotes()).call(closures)                    \n\n//print the results\nresults foreach { res \u003d\u003e {println (\"Result \u003d \" + res)} }",
      "dateUpdated": "Jun 17, 2016 12:39:28 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1463940939562_-27888927",
      "id": "20160522-181539_22065907",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import JsonProtocol._\nScenarios: List[Scenario] \u003d List(Scenario(EUR_Swap_1Y_1,Map(EUR_Swap_1Y -\u003e 0.25)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.24)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.29)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.28)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.21)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.26)), Scenario(EUR_Swap_1Y_2,Map(EUR_Swap_1Y -\u003e 0.23)))\nclosures: List[() \u003d\u003e String] \u003d List(\u003cfunction0\u003e, \u003cfunction0\u003e, \u003cfunction0\u003e, \u003cfunction0\u003e, \u003cfunction0\u003e, \u003cfunction0\u003e, \u003cfunction0\u003e)\nresults: java.util.Collection[String] \u003d [Scenario_EUR_Swap_1Y_1 : [{\"PV\":\"5.181798798242761\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.74070427783883\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.369962216187476\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.92334871848928\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.991728477925241\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.409720226345203\"}], Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.799716141976893\"}]]\nResult \u003d Scenario_EUR_Swap_1Y_1 : [{\"PV\":\"5.181798798242761\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.74070427783883\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.369962216187476\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"5.92334871848928\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.991728477925241\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.409720226345203\"}]\nResult \u003d Scenario_EUR_Swap_1Y_2 : [{\"PV\":\"4.799716141976893\"}]\n"
      },
      "dateCreated": "May 22, 2016 6:15:39 PM",
      "dateStarted": "Jun 17, 2016 12:39:28 PM",
      "dateFinished": "Jun 17, 2016 12:39:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Jun 17, 2016 12:37:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1465667627891_1002465817",
      "id": "20160611-175347_1151231655",
      "dateCreated": "Jun 11, 2016 5:53:47 PM",
      "dateStarted": "Jun 17, 2016 12:37:43 PM",
      "dateFinished": "Jun 17, 2016 12:37:43 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Zeppelin+Ignite+Quantlib+QUIL",
  "id": "2BMKY4KD1",
  "angularObjects": {
    "2BMAUQEGZ": [],
    "2BKDJU4A8": [],
    "2BK4YDBHP": [],
    "2BMZYRM31": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}